"use client";
import React, { useEffect, useState } from "react";
import { assets } from "@/assets/assets";
import Image from "next/image";
import { useAppContext } from "@/context/AppContext";
import Footer from "@/components/Footer";
import Navbar from "@/components/Navbar";
import Loading from "@/components/Loading";
import axios from "axios";
import toast from "react-hot-toast";
import { useUser } from "@clerk/nextjs";

const MyOrders = () => {
  const { currency, getToken, user, formatCurrency, router } = useAppContext();
  const { isLoaded, isSignedIn } = useUser();
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchOrders = async () => {
    try {
      const token = await getToken();
      if (!token || !isSignedIn) {
        toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem ƒë∆°n h√†ng c·ªßa b·∫°n");
        router.push("/sign-in");
        return;
      }
      const { data } = await axios.get("/api/order/list", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (data.success) {
        setOrders(data.orders.reverse());
      } else {
        if (data.message === "Ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y") {
          toast.error(
            "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."
          );
          router.push("/sign-in");
        } else {
          toast.error(data.message);
        }
      }
    } catch (error) {
      console.error("L·ªói khi l·∫•y ƒë∆°n h√†ng:", error);
      if (error.response?.status === 401) {
        toast.error("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        router.push("/sign-in");
      } else {
        toast.error("L·ªói khi t·∫£i ƒë∆°n h√†ng: " + error.message);
      }
    } finally {
      setLoading(false);
    }
  };

  const fetchTrackingStatus = async () => {
    // Ch·ªâ update tracking status n·∫øu c√≥ orders
    if (orders.length === 0) {
      console.log("No orders to update tracking status");
      return;
    }
    
    try {
      const updatedOrders = await Promise.all(
        orders.map(async (order) => {
          const tracking = order.trackingCode;
          if (tracking && !tracking.startsWith("TEMP-")) {
            try {
              const { data: ghnData } = await axios.get(
                `/api/track-order?order_code=${tracking}`
              );
              return {
                ...order,
                ghnStatus: ghnData.data?.status || null,
                ghnStatusText: ghnData.data?.status_name || order.status,
              };
            } catch (error) {
              console.warn(`Track Order Error for ${tracking}:`, error.message);
              return { ...order, ghnStatus: null, ghnStatusText: order.status };
            }
          }
          return { ...order, ghnStatus: null, ghnStatusText: order.status };
        })
      );
      setOrders(updatedOrders);
    } catch (error) {
      console.error("Error updating tracking status:", error);
    }
  };

  const getVariantName = (variant) => {
    if (
      !variant ||
      !variant.attributeRefs ||
      variant.attributeRefs.length === 0
    ) {
      console.log("No attributeRefs found for variant:", variant);
      return "";
    }
    if (typeof variant === "string" || !variant._id) {
      console.log("Invalid variant format:", variant);
      return "";
    }
    const variantDetails = variant.attributeRefs
      .map((ref) => ref.value)
      .join(", ");
    return ` (${variantDetails})`;
  };

  const getPaymentMethodText = (method) => {
    switch (method?.toLowerCase()) {
      case "vnpay":
        return "Thanh to√°n qua VNPAY";
      case "cod":
        return "Thanh to√°n khi nh·∫≠n h√†ng (COD)";
      default:
        return "Ph∆∞∆°ng th·ª©c kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  const getStatusText = (status, ghnStatusText) => {
    switch (status) {
      case "pending":
        return "Ch·ªù x√°c nh·∫≠n";
      case "paid":
        return "ƒê√£ thanh to√°n";
      case "confirmed":
        return "ƒê√£ x√°c nh·∫≠n";
      case "shipped":
        return "ƒêang giao";
      case "delivered":
        return "Giao th√†nh c√¥ng";
      case "canceled":
        return "ƒê√£ h·ªßy";
      case "ghn_failed":
        return "L·ªói t·∫°o ƒë∆°n GHN";
      case "Ch·ªù l·∫•y h√†ng":
        return "Ch·ªù l·∫•y h√†ng";
      case "ƒêang giao":
        return ghnStatusText || "ƒêang giao";
      case "ƒê√£ giao":
        return "Giao th√†nh c√¥ng";
      case "ƒê√£ h·ªßy":
        return "ƒê√£ h·ªßy";
      default:
        return ghnStatusText || "Ch∆∞a x√°c ƒë·ªãnh";
    }
  };

  useEffect(() => {
    if (!isLoaded) {
      console.log("ƒêang ƒë·ª£i Clerk t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng...");
      return;
    }
    if (user && isSignedIn) {
      fetchOrders(); // L·∫•y danh s√°ch ƒë∆°n h√†ng m·ªôt l·∫ßn khi load
    } else {
      router.push("/sign-in");
    }
  }, [isLoaded, isSignedIn]); // Lo·∫°i b·ªè user kh·ªèi dependency ƒë·ªÉ tr√°nh re-run

  // Separate useEffect cho tracking interval
  useEffect(() => {
    if (orders.length > 0) {
      const intervalId = setInterval(fetchTrackingStatus, 60000); // C·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªói 1 ph√∫t
      return () => clearInterval(intervalId);
    }
  }, [orders.length]); // Ch·ªâ dependency v√†o length thay v√¨ to√†n b·ªô orders array

  return (
    <>
      <Navbar />
      <div className="flex flex-col justify-between px-4 sm:px-6 md:px-16 lg:px-32 py-6 min-h-screen bg-gray-50">
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              ƒê∆°n ƒê·∫∑t H√†ng C·ªßa T√¥i
            </h2>
            <p className="text-gray-600">
              Theo d√µi t√¨nh tr·∫°ng c√°c ƒë∆°n h√†ng c·ªßa b·∫°n
            </p>
          </div>

          {loading ? (
            <div className="flex justify-center items-center py-16">
              <Loading />
            </div>
          ) : (
            <div className="space-y-4">
              {orders.length === 0 ? (
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
                  <div className="text-gray-400 text-6xl mb-4">üì¶</div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o
                  </h3>
                  <p className="text-gray-500">
                    H√£y kh√°m ph√° v√† mua s·∫Øm nh·ªØng s·∫£n ph·∫©m y√™u th√≠ch c·ªßa b·∫°n
                  </p>
                </div>
              ) : (
                orders.map((order) => (
                  <div
                    key={order._id}
                    className="bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow duration-200"
                  >
                    <div className="p-6">
                      <div className="flex flex-col lg:flex-row gap-6">
                        {/* S·∫£n ph·∫©m - hi·ªÉn th·ªã d·ªçc t·ª´ng s·∫£n ph·∫©m */}
                        <div className="flex-1 min-w-0">
                          <div className="space-y-3">
                            {order.items.map((item, index) => (
                              <div
                                key={index}
                                className="flex gap-3 items-center p-2 bg-gray-50 rounded-lg"
                              >
                                {/* H√¨nh ·∫£nh s·∫£n ph·∫©m */}
                                <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0">
                                  {(item?.variantId?.images &&
                                    item?.variantId?.images.length > 0) ||
                                  (item?.product?.images &&
                                    item?.product?.images.length > 0) ? (
                                    <Image
                                      className="w-full h-full object-cover rounded-lg"
                                      src={
                                        (item?.variantId?.images &&
                                          item?.variantId?.images[0]) ||
                                        item?.product?.images[0]
                                      }
                                      alt={
                                        item.product?.name || "Product Image"
                                      }
                                      width={48}
                                      height={48}
                                    />
                                  ) : (
                                    <Image
                                      className="w-full h-full object-cover rounded-lg"
                                      src={assets.box_icon}
                                      alt="order icon"
                                      width={48}
                                      height={48}
                                    />
                                  )}
                                </div>

                                {/* Th√¥ng tin s·∫£n ph·∫©m */}
                                <div className="flex-1 min-w-0">
                                  <div className="font-medium text-gray-900 text-sm line-clamp-2">
                                    {item.product?.name ||
                                      "S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh"}
                                    {item.variantId?.attributeRefs &&
                                      item.variantId.attributeRefs.length >
                                        0 && (
                                        <span className="text-gray-600 font-normal">
                                          {" "}
                                          (
                                          {item.variantId.attributeRefs
                                            .map((ref) => ref.value)
                                            .join("/")}
                                          )
                                        </span>
                                      )}
                                    <span className="text-gray-600 font-normal">
                                      {" "}
                                      x {item.quantity}
                                    </span>
                                  </div>
                                </div>

                                {/* Gi√° ti·ªÅn s·∫£n ph·∫©m */}
                                <div className="text-right flex-shrink-0">
                                  <div className="text-sm font-semibold text-green-600">
                                    {formatCurrency(
                                      (item.variantId?.offerPrice ||
                                        item.variantId?.price ||
                                        item.product?.offerPrice ||
                                        item.product?.price ||
                                        0) * item.quantity
                                    )}
                                  </div>
                                  <div className="text-xs text-gray-500">
                                    {formatCurrency(
                                      item.variantId?.offerPrice ||
                                        item.variantId?.price ||
                                        item.product?.offerPrice ||
                                        item.product?.price ||
                                        0
                                    )}
                                    /c√°i
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>

                        {/* Th√¥ng tin giao h√†ng */}
                        <div className="flex-1 min-w-0 lg:max-w-xs">
                          <h4 className="text-sm font-medium text-gray-900 mb-2">
                            Th√¥ng tin giao h√†ng
                          </h4>
                          <div className="text-sm text-gray-600 space-y-1">
                            <div className="font-medium text-gray-900">
                              T√™n Kh√°ch h√†ng:{" "}
                              {order.address?.fullName || "T√™n kh√¥ng x√°c ƒë·ªãnh"}
                            </div>
                            <div className="font-medium text-gray-900">
                              ƒê·ªãa ch·ªâ: {order.address?.area || "N/A"}
                            </div>
                            <div className="font-medium text-gray-900">
                              {order.address?.city && order.address?.state
                                ? `${order.address.city}, ${order.address.state}, `
                                : "N/A"}
                              {order.address?.ward &&
                              order.address?.ward !== "Kh√°c"
                                ? `${order.address.ward}, `
                                : ""}
                            </div>
                            <div className="font-medium">
                              SƒêT: {order.address?.phoneNumber || "N/A"}
                            </div>
                          </div>
                        </div>

                        {/* T·ªïng ti·ªÅn */}
                        <div className="flex-shrink-0 text-center lg:text-right">
                          <h4 className="text-sm font-medium text-gray-900 mb-2">
                            T·ªïng ti·ªÅn
                          </h4>
                          <div className="text-2xl font-bold text-green-600">
                            {formatCurrency(order.amount)}
                          </div>
                        </div>
                      </div>

                      {/* Th√¥ng tin ƒë∆°n h√†ng */}
                      <div className="mt-6 pt-6 border-t border-gray-200">
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
                          <div>
                            <span className="text-gray-500">
                              Ph∆∞∆°ng th·ª©c thanh to√°n:
                            </span>
                            <div className="font-medium text-gray-900 mt-1">
                              {getPaymentMethodText(order.paymentMethod)}
                            </div>
                          </div>
                          <div>
                            <span className="text-gray-500">
                              Ng√†y ƒë·∫∑t h√†ng:
                            </span>
                            <div className="font-medium text-gray-900 mt-1">
                              {new Date(order.date).toLocaleDateString("vi-VN")}
                            </div>
                          </div>
                          <div>
                            <span className="text-gray-500">M√£ ƒë∆°n h√†ng:</span>
                            <div className="font-medium text-gray-900 mt-1 font-mono text-xs">
                              #{order._id.slice(-8).toUpperCase()}
                            </div>
                          </div>
                          <div>
                            <span className="text-gray-500">Tr·∫°ng th√°i:</span>
                            <div className="mt-1">
                              <span
                                className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  order.status === "delivered" ||
                                  order.status === "ƒê√£ giao"
                                    ? "bg-green-100 text-green-800"
                                    : order.status === "canceled" ||
                                      order.status === "ƒê√£ h·ªßy"
                                    ? "bg-red-100 text-red-800"
                                    : order.status === "shipped" ||
                                      order.status === "ƒêang giao"
                                    ? "bg-blue-100 text-blue-800"
                                    : "bg-yellow-100 text-yellow-800"
                                }`}
                              >
                                {getStatusText(
                                  order.status,
                                  order.ghnStatusText
                                )}
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
          )}
        </div>
      </div>
      <Footer />
    </>
  );
};

export default MyOrders;
